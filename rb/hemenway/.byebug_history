continue
base_two_num.count('1')
n
continue
base_two_num.count('1')
n
base_ten_num <= 8
base_ten_num
   55: 
base_ten_num <= 8 #'100'=> '10'
continue
end
    end
    #   # '10000'
    #   # '100001111'
    #   # '11111'
    # elsif dynamic_chunk.empty?
    prev_permutation(base_two_num)
  if base_two_num.count('1') == ones_count
  ones_count ||= closest_prev_perfect_bit_ones_count(base_two_num)
  return base_tenify(base_two_num.slice(0..base_two_num.length-2)) if base_ten_num <= 8 #'100'=> '10'
  return nil if base_ten_num < 1
exit
base_ten_num
