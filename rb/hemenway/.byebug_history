exit
continue
exit
n
shift_final_dynamic_one_right(res)
nshift_final_dynamic_one_right(res)
n
filled_last_zero
final_zero_idx(res)
final_zero_idx(temp_res)
n
c
continue
c
n
display filled_last_zero
display should_shift_final_dynamic_one
display temp_res
display res
exit
end
continue
display filled_last_zero
display temp_res
display res
quit
c
continue
n
nn
n
nn
c
display temp_res
display res
display should_shift_final_dynamic_one
display filled_last_zero
exit
continue
n
c
continue
res.equal?(temp_res)
'1234'.equal?('1234')
'1234' == '1234'
res ==temp_res
res
first_final_dyn_zero_idx
c
first_final_dyn_zero_idx
c
continue
"1010001011111".length
"1010001011110".length
first_final_dyn_zero_idx
c
n
display should_shift_final_dynamic_one
display shifted_into_last_zero_idx
display filled_last_zero
display temp_res
displat temp_res
display res
continue
base_two_num.count('1')
n
continue
base_two_num.count('1')
n
base_ten_num <= 8
base_ten_num
   55: 
base_ten_num <= 8 #'100'=> '10'
continue
end
    end
    #   # '10000'
    #   # '100001111'
    #   # '11111'
    # elsif dynamic_chunk.empty?
    prev_permutation(base_two_num)
  if base_two_num.count('1') == ones_count
  ones_count ||= closest_prev_perfect_bit_ones_count(base_two_num)
  return base_tenify(base_two_num.slice(0..base_two_num.length-2)) if base_ten_num <= 8 #'100'=> '10'
  return nil if base_ten_num < 1
exit
base_ten_num
